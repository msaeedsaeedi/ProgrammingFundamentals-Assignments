/*
    Assignment # 3 - Q3

    Name    : Mohammad Saeed
    Roll    : 23i-0777
    Section : B

*/

#include <iostream>
using namespace std;

/*
    Function Declerations
*/
void Draw();
int ProcessCharacter(char character);
void SelectWord(char word[]);

/*
    Miscellaneous Functions
*/
int Life(bool increase);
void CommanAlpha(char &Alpha, char word[]);
int Length(char array[]);

/*
    Global Variables
        - playername    -> Player's Name
        - Guessed       -> Progress of user guessing
        - Secret_word   -> Secret Word Chosen among 100 words
        - hangman       -> Bool used to display hangman
        - tried         -> Stores the alphabets tried
        - commonAlpha   -> Common Alphabet between Player's name and Secret word
*/
char playername[20]{};
char Guessed[20]{};
char Secret_word[20]{};
bool hangman[7]{};
char tried[27]{};
char commonAlpha{};

int main()
{
    /*
        character   -> Input letter
        matched     -> Flags generated by ProcessCharacter Function
    */
    char character{};
    int matched = -1;

    /*
        Select Word among 100. (by reference)
    */
    SelectWord(Secret_word);

    /*
        Input Player's Name
    */
    cout << "Enter your Name : ";
    cin.getline(playername, 20);

    /*
        Find Commmon Alphabet between Player's name and secret word
    */
    CommanAlpha(commonAlpha, Secret_word);

    /*
        Draw Initial Frame
    */
    Draw();

    /*
        Iterate until game ends (based on flags)
    */
    do
    {
        /*
            Input Character
        */
        cout << "\nEnter Character : ";
        cin >> character;
        cin.ignore(1000, '\n');

        /*
            Process Character and return flag generated

            <== IMPORTANT FLAGS ==>
                - (-3)  -> Already Tried this number
                - (-2)  -> Player Lost the game
                - (-1)  -> Life Decreased
                - ( 0)  -> Word is not completely guessed
                - ( 1)  -> Player guessed the word right
        */
        matched = ProcessCharacter(character);

        /*
            Update Frame
        */
        Draw();

        /*
            Diplay that user already tried this character
        */
        if (matched == -3)
            cout << "\nAlready Tried !" << endl;

    } while (matched != 1 && matched != -2);

    /*
        Display the results.
    */
    if (matched == 1)
        cout << "<=== You Won ===>" << endl;
    else if (matched == -2)
        cout << "<=== You lost ===>" << endl;

    /*
        Reveal the Secreat Word
    */
    cout << "\nThe Word is : " << Secret_word << endl;

    return 0;
}
void DisplayWord()
{
    cout << endl;
    
    /*
        Get Length of Secret Word
    */
    int wordlength = Length(Secret_word);

    /*
        Iterate over the Secret Word and Print the guessed characters
    */
    for (int i = 0; i < wordlength; i++)
    {
        if (Guessed[i] == '\0')
            cout << "_ ";
        else
            cout << Guessed[i] << " ";
    }

    /*
        Display Count of Secret Word
    */
    cout << "[" << Length(Secret_word)
         << "]" << endl;
}
void Draw()
{
    system("clear");

    /*
        Display Player's Name
    */
    cout << "Player Name : " << playername << endl;

    /*
        Display Guessing Word
    */
    DisplayWord();

    /*
        Array to handle hangman status
    */
    char hangman[7]{'|', 'O', '|', '/', '\\', '/', '\\'};
    
    /*
        Print Hangman
    */
    cout << "\n  +---+  " << endl
         << "  " << (::hangman[0] ? hangman[0] : ' ') << "   |  " << endl
         << "  " << (::hangman[1] ? hangman[1] : ' ') << "   |  " << endl
         << " " << (::hangman[3] ? hangman[3] : ' ') << (::hangman[2] ? hangman[2] : ' ') << (::hangman[4] ? hangman[4] : ' ') << "  |  " << endl
         << " " << (::hangman[5] ? hangman[5] : ' ') << " " << (::hangman[6] ? hangman[6] : ' ') << "  |  " << endl
         << "      |  " << endl
         << "      |  " << endl
         << "=========\n"
         << endl;
}
int ProcessCharacter(char character)
{
    /*
        Check Whether the player already tried the character or not
    */
    bool already_tried = false;
    for (int i = 0; i < Length(tried); i++)
    {
        if (character == tried[i])
        {
            already_tried = true;
        }
    }
    
    /*
        Exit if already tried
    */
    if (already_tried)
    {
        return -3;
    }
    else
    {
        /*
            Reveal the letter if guessed right
        */
        bool added = false;
        for (int i = 0; i < Length(Secret_word); i++)
        {
            if (character == Secret_word[i])
            {
                /*
                    If entered character is common between Player's name
                        - Increase Life
                */
                if (character == commonAlpha)
                    Life(true);
                Guessed[i] = character;
                added = true;
                tried[Length(tried)] = character;
            }
        }
        if (added)
        {
            /*
                Return Wheather the word is completely guessed or not?
            */
            bool completed = 1;
            for (int i = 0; i < Length(Secret_word); i++)
            {
                if (Secret_word[i] != Guessed[i])
                {
                    completed = 0;
                }
            }
            return completed;
        }
        else
        {
            /*
                Decrease Life
            */
            tried[Length(tried)] = character;
            return (Life(false) == 0) ? (-2) : (-1);
        }
    }
}
void SelectWord(char word[])
{
    /*
        Arrays of 100 words.
    */
    char words[100][20] = {
        "apple", "banana", "cherry", "dog", "elephant", "flower", "guitar", "happy", "island", "jazz",
        "kite", "lemon", "mountain", "notebook", "ocean", "piano", "queen", "rabbit", "sunny", "table",
        "umbrella", "victory", "waterfall", "xylophone", "yellow", "airplane", "butterfly", "candle", "dolphin",
        "eagle", "fireworks", "giraffe", "happiness", "icecream", "jungle", "kiwi", "lighthouse", "moonlight", "noodles",
        "orchestra", "parrot", "quilt", "rainbow", "sapphire", "turtle", "ukulele", "vortex", "whisper", "xylograph",
        "yogurt", "zeppelin", "acoustic", "breeze", "carousel", "dazzle", "eclipse", "fandango", "gazelle", "hazelnut",
        "illusion", "jubilee", "kangaroo", "lagoon", "marathon", "nirvana", "octopus", "platinum", "quasar", "razzmatazz",
        "silhouette", "tranquil", "ultraviolet", "vagabond", "whimsical", "xenophobia", "yearning", "zephyr", "ambrosia",
        "blissful", "cascade", "dandelion", "effervescent", "felicity", "gossamer", "halcyon", "incandescent", "juxtapose",
        "kaleidoscope", "luminescent", "mellifluous", "nurturing", "opulent", "peregrinate", "quintessential", "resplendent",
        "serendipity", "tranquility", "ubiquitous", "verdant", "whimsical"};
    /*
        Generate Random integer [0,99]
    */
    srand(time(0));
    int selected_word = rand() % 100;

    /*
        Return random word (by reference)
    */
    for (int i = 0; i < Length(words[selected_word]); i++)
    {
        word[i] = words[selected_word][i];
    }
}

int Life(bool increase)
{
    /*
        life      -> Total Lives
        life_left -> Lives left
    */
    const int life = 7;
    static int life_left = 7;

    /*
        Increase Life
    */
    if (increase)
    {
        ::hangman[life - life_left - 1] = false;
        life_left++;
    }

    /*
        Decrease Life    
    */
    else
    {
        ::hangman[life - life_left] = true;
        life_left--;
    }

    /*
        Return Lives left
    */
    return life_left;
}
void CommanAlpha(char &Alpha, char word[])
{
    /*
        Iterate over player name and word to find common character
    */
    for (int i = 0; i < Length(playername); i++)
    {
        for (int j = 0; j < Length(word); j++)
        {
            if (playername[i] == word[j])
            {
                Alpha = playername[i];
                break;
            }
        }
    }
}
int Length(char array[])
{
    /*
        Return Length of array
    */
    int count{0};
    for (int i = 0; array[i] != '\0'; i++)
        count++;
    return count;
}